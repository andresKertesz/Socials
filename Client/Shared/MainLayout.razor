@using Socials.Client.Client.Controllers;
@inject ComponentController componentController
@inject AuthenticationController authController
@inject NavigationManager navManager
@inherits LayoutComponentBase

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<RadzenLayout style="height: auto">
    <RadzenHeader class="row">
        <RadzenStack  Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0" Style="background-color: #5f5bf8" class="gradientBackground">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="Socials" class="app-title" Style="align-content: center; width: 15%" />
            <div style="width: 65%">
            </div>
            @if (authController.LoggedIn)
            {
                 <RadzenProfileMenu Style="width: 15% ; margin-right:0px; justify-content:right; background-color:transparent">
                    <Template>
                        <RadzenLabel Text="@authController.LoggedInUser?.Username" Style="column-gap:2px"></RadzenLabel>
                        <RadzenImage Path="logo.png" Style="border-radius: 16px; height: 32px; width: 32px"/>
                    </Template>
                    <ChildContent>
                        <RadzenProfileMenuItem Text="Perfil" Path="@ProfilePath" Value="perfil" Icon="person"/>
                        <RadzenProfileMenuItem Text="Cerrar sesiÃ³n" Path="logout" Value="logout" Icon="power_settings_new" />
                    </ChildContent>
                </RadzenProfileMenu>
            }
            else
            {
                <RadzenButton Shade="Shade.Default" Click="SendToLogin" Text="Login" ButtonStyle="ButtonStyle.Light" Style="width: 166px; margin-right: 20px; min-width: 80px"/>
            }
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Eventos" Path="/" Icon="event" />
            <RadzenPanelMenuItem Text="Categorias" Path="categorias" Icon="list" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
            @Body
    </RadzenBody>
</RadzenLayout>



@code {
    bool sidebar1Expanded = true;

    private string ProfilePath => GetProfilePath();

    string GetProfilePath()
    {
        string profile = "perfil/";
        if(authController.LoggedInUser != null)
        {
            return profile+authController.LoggedInUser.Username;
        }
        return profile;
    }
    protected override void OnInitialized()
    {
        componentController.OnTitleChanged += StateHasChanged;
        authController.UserLoggedOutOrIn += StateHasChanged;

        base.OnInitialized();
    }

    protected async override Task OnInitializedAsync()
    {
        string? token = await authController.GetUserToken();
        if(token != null)
        {
            await authController.ReconnectUser(token);
        }
    }
    public void RefreshState()
    {
        this.StateHasChanged();
    }

    public void Dispose()
    {
        componentController.OnTitleChanged -= StateHasChanged;
        authController.UserLoggedOutOrIn -= StateHasChanged;
    }


    void SendToLogin()
    {
        navManager.NavigateTo("/login");
    }
    private string? TabTitle { get; set; }
}